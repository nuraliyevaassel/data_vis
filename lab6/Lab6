{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.core.display import HTML, display\n",
    "from string import Template\n",
    "import pandas as pd\n",
    "import json, random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<script src='d3.js'></script>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "HTML(\"<script src='d3.js'></script>\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"bar-data.csv\", sep = \",\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jan</td>\n",
       "      <td>290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Feb</td>\n",
       "      <td>300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mar</td>\n",
       "      <td>340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>April</td>\n",
       "      <td>344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>May</td>\n",
       "      <td>376</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    date  value\n",
       "0    Jan    290\n",
       "1    Feb    300\n",
       "2    Mar    340\n",
       "3  April    344\n",
       "4    May    376"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'date': 'Jan', 'value': 290},\n",
       " {'date': 'Feb', 'value': 300},\n",
       " {'date': 'Mar', 'value': 340},\n",
       " {'date': 'April', 'value': 344},\n",
       " {'date': 'May', 'value': 376}]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_dict = df.to_dict(orient=\"records\")\n",
    "df_dict[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "js_text_template = Template('''\n",
    "var margin = {top: 20, right: 20, bottom: 70, left: 40},\n",
    "    width = 720 - margin.left - margin.right,\n",
    "    height = 300 - margin.top - margin.bottom;\n",
    "\n",
    "var x = d3.scale.linear().range([0, width]);\n",
    "\n",
    "var y = d3.scale.linear().range([height, 0]);\n",
    "\n",
    "var xAxis = d3.svg.axis()\n",
    "    .scale(x)\n",
    "    .orient(\"bottom\")\n",
    "\n",
    "var yAxis = d3.svg.axis()\n",
    "    .scale(y)\n",
    "    .orient(\"left\")\n",
    "    .ticks(10);\n",
    "\n",
    "var color = d3.scale.category10();\n",
    "\n",
    "var xAxis = d3.svg.axis()\n",
    ".scale(x)\n",
    ".orient(\"bottom\");\n",
    "\n",
    "\n",
    "\n",
    "var yAxis = d3.svg.axis()\n",
    ".scale(y)\n",
    ".orient(\"left\");\n",
    "\n",
    "var svg = d3.select(\"#$maid\").append(\"svg\")\n",
    ".attr(\"width\", width + margin.left+margin.left)\n",
    ".attr(\"height\", height + margin.top+margin.bottom)\n",
    ".append(\"g\")\n",
    ".attr(\"transform\",\"translate(\"+margin.left+\",\"+margin.top+\")\")\n",
    "\n",
    "var data = $python_data;\n",
    "\n",
    "\n",
    "\n",
    "console.log(data)\n",
    "x.domain(d3.extent(data,function(d) { return d.date;}));\n",
    "y.domain(d3.extent(data,function(d) { return d.value}));\n",
    "\n",
    "\n",
    "svg.append(\"g\")\n",
    ".attr(\"class\",\"x axis\")\n",
    ".attr(\"transform\",\"translate(20,\"+height+\")\")\n",
    ".call(xAxis)\n",
    ".append(\"text\")\n",
    ".attr(\"transform\",\"rotate(-90)\")\n",
    ".attr(\"class\",\"label\")\n",
    ".attr(\"x\",width)\n",
    "\n",
    "svg.append(\"g\")\n",
    ".attr(\"class\",\"y axis\")\n",
    ".call(yAxis)\n",
    ".append(\"text\")\n",
    ".attr(\"transform\",\"rotate(-90)\")\n",
    ".attr(\"class\",\"label\")\n",
    ".attr(\"y\",6)\n",
    ".attr(\"dy\",\".71em\")\n",
    ".style(\"text-anchor\",\"end\")\n",
    "\n",
    "svg.selectAll(\".dot\")\n",
    "      .data(data)\n",
    "    .enter().append(\"rect\")\n",
    "      .style(\"fill\", \"#E6E6FA\")\n",
    "      .attr(\"x\", function(d) { return x(d.date); })\n",
    "      .attr(\"width\", 40)\n",
    "      .attr(\"y\", function(d) { return y(d.value); })\n",
    "      .attr(\"height\", function(d) { return height - y(d.value); });\n",
    "      \n",
    "\n",
    "step = 17  \n",
    "var colors = [\"#F08080\", \"#FFB6C1\",\"LightYellow\", \"#E6E6FA\", \"#E0FFFF\", \"#FFDAB9\", \"#F08080\", \"#FFB6C1\",\"LightYellow\", \"#E6E6FA\", \"#E0FFFF\", \"#FFDAB9\"]\n",
    "for (let i = 0; i < data.length - 2; i++){\n",
    "      d = data[i]\n",
    "      d2 = data[i + 1]\n",
    "      \n",
    "      console.log('d' , d)\n",
    "      svg\n",
    "        .append(\"line\")        \n",
    "        .attr(\"x1\", step)\n",
    "        .attr(\"y1\", height - d.value/2 - 2)\n",
    "        .attr(\"x2\", step + 67)\n",
    "        .attr(\"y2\", height - d2.value/2 - 2 )\n",
    "        .style(\"stroke\", \"blue\") \n",
    "        .style(\"stroke-width\", \"3px\") \n",
    "        step = step + 67\n",
    "}\n",
    "\n",
    "\n",
    "''');\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "html_template = Template('''\n",
    "    <style>\n",
    "    .dot{\n",
    "        stroke: #000;\n",
    "    }\n",
    "    .legend{\n",
    "        color:blue;\n",
    "    }\n",
    "    \n",
    "    .axis path,\n",
    "    .axis line{\n",
    "        fill: none;\n",
    "        shape-rendering:crispEdges;\n",
    "    \n",
    "    }\n",
    "    </style>\n",
    "    <div id=\"scatter-id\"></div>\n",
    "    <script>$js_text</script>\n",
    "''')\n",
    "js_text = js_text_template.substitute({\n",
    "    \"python_data\":json.dumps(df_dict),\n",
    "    \"maid\":\"scatter-id\"\n",
    "})\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <style>\n",
       "    .dot{\n",
       "        stroke: #000;\n",
       "    }\n",
       "    .legend{\n",
       "        color:blue;\n",
       "    }\n",
       "    \n",
       "    .axis path,\n",
       "    .axis line{\n",
       "        fill: none;\n",
       "        shape-rendering:crispEdges;\n",
       "    \n",
       "    }\n",
       "    </style>\n",
       "    <div id=\"scatter-id\"></div>\n",
       "    <script>\n",
       "var margin = {top: 20, right: 20, bottom: 70, left: 40},\n",
       "    width = 720 - margin.left - margin.right,\n",
       "    height = 300 - margin.top - margin.bottom;\n",
       "\n",
       "var x = d3.scale.linear().range([0, width]);\n",
       "\n",
       "var y = d3.scale.linear().range([height, 0]);\n",
       "\n",
       "var xAxis = d3.svg.axis()\n",
       "    .scale(x)\n",
       "    .orient(\"bottom\")\n",
       "\n",
       "var yAxis = d3.svg.axis()\n",
       "    .scale(y)\n",
       "    .orient(\"left\")\n",
       "    .ticks(10);\n",
       "\n",
       "var color = d3.scale.category10();\n",
       "\n",
       "var xAxis = d3.svg.axis()\n",
       ".scale(x)\n",
       ".orient(\"bottom\");\n",
       "\n",
       "\n",
       "\n",
       "var yAxis = d3.svg.axis()\n",
       ".scale(y)\n",
       ".orient(\"left\");\n",
       "\n",
       "var svg = d3.select(\"#scatter-id\").append(\"svg\")\n",
       ".attr(\"width\", width + margin.left+margin.left)\n",
       ".attr(\"height\", height + margin.top+margin.bottom)\n",
       ".append(\"g\")\n",
       ".attr(\"transform\",\"translate(\"+margin.left+\",\"+margin.top+\")\")\n",
       "\n",
       "var data = [{\"date\": \"Jan\", \"value\": 290}, {\"date\": \"Feb\", \"value\": 300}, {\"date\": \"Mar\", \"value\": 340}, {\"date\": \"April\", \"value\": 344}, {\"date\": \"May\", \"value\": 376}, {\"date\": \"June\", \"value\": 200}, {\"date\": \"July\", \"value\": 150}, {\"date\": \"Sep\", \"value\": 200}, {\"date\": \"Oct\", \"value\": 300}, {\"date\": \"Nov\", \"value\": 344}, {\"date\": \"Dec\", \"value\": 376}];\n",
       "\n",
       "\n",
       "\n",
       "console.log(data)\n",
       "x.domain(d3.extent(data,function(d) { return d.date;}));\n",
       "y.domain(d3.extent(data,function(d) { return d.value}));\n",
       "\n",
       "\n",
       "svg.append(\"g\")\n",
       ".attr(\"class\",\"x axis\")\n",
       ".attr(\"transform\",\"translate(20,\"+height+\")\")\n",
       ".call(xAxis)\n",
       ".append(\"text\")\n",
       ".attr(\"transform\",\"rotate(-90)\")\n",
       ".attr(\"class\",\"label\")\n",
       ".attr(\"x\",width)\n",
       "\n",
       "svg.append(\"g\")\n",
       ".attr(\"class\",\"y axis\")\n",
       ".call(yAxis)\n",
       ".append(\"text\")\n",
       ".attr(\"transform\",\"rotate(-90)\")\n",
       ".attr(\"class\",\"label\")\n",
       ".attr(\"y\",6)\n",
       ".attr(\"dy\",\".71em\")\n",
       ".style(\"text-anchor\",\"end\")\n",
       "\n",
       "svg.selectAll(\".dot\")\n",
       "      .data(data)\n",
       "    .enter().append(\"rect\")\n",
       "      .style(\"fill\", \"#E6E6FA\")\n",
       "      .attr(\"x\", function(d) { return x(d.date); })\n",
       "      .attr(\"width\", 40)\n",
       "      .attr(\"y\", function(d) { return y(d.value); })\n",
       "      .attr(\"height\", function(d) { return height - y(d.value); });\n",
       "      \n",
       "\n",
       "step = 17  \n",
       "var colors = [\"#F08080\", \"#FFB6C1\",\"LightYellow\", \"#E6E6FA\", \"#E0FFFF\", \"#FFDAB9\", \"#F08080\", \"#FFB6C1\",\"LightYellow\", \"#E6E6FA\", \"#E0FFFF\", \"#FFDAB9\"]\n",
       "for (let i = 0; i < data.length - 2; i++){\n",
       "      d = data[i]\n",
       "      d2 = data[i + 1]\n",
       "      \n",
       "      console.log('d' , d)\n",
       "      svg\n",
       "        .append(\"line\")        \n",
       "        .attr(\"x1\", step)\n",
       "        .attr(\"y1\", height - d.value/2 - 2)\n",
       "        .attr(\"x2\", step + 67)\n",
       "        .attr(\"y2\", height - d2.value/2 - 2 )\n",
       "        .style(\"stroke\", \"blue\") \n",
       "        .style(\"stroke-width\", \"3px\") \n",
       "        step = step + 67\n",
       "}\n",
       "\n",
       "\n",
       "</script>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "HTML(html_template.substitute({'js_text':js_text}))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
